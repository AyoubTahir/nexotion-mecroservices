services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-volumes/mongo-data:/data/db

  mysql:
    container_name: mysql_container
    image: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=nexotion
      - MYSQL_DATABASE=nexotion_auth
      - MYSQL_USER=nexotion
      - MYSQL_PASSWORD=nexotion
    ports:
    - 3306:3306
    volumes:
    - ./docker-volumes/mysql-data:/var/lib/mysql
  
  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
    - POSTGRES_USER=nexotion
    - POSTGRES_PASSWORD=nexotion
    - POSTGRES_DB=nexotion_builder
    ports:
    - 5432:5432
    volumes:
    - ./docker-volumes/postgres-data:/var/lib/postgresql
  
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:4.1-rc-management-alpine
    restart: always
    environment:
    - RABBITMQ_DEFAULT_USER=nexotion
    - RABBITMQ_DEFAULT_PASS=nexotionpassword
    ports:
    - 5672:5672
    - 15672:15672
    volumes:
    - ./docker-volumes/rabbitmq:/var/lib/rabbitmq
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper_container
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: wurstmeister/kafka
    container_name: kafka_container
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://host.docker.internal:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./docker-volumes/kafka:/kafka
    networks:
      - kafka-net
    depends_on:
      - zookeeper

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    user: "1000:1000"
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
  
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.16.1
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch

networks:
  elastic:
    name: elastic
  kafka-net:
    driver: bridge
      